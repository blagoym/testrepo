import argparse
import yt_dlp
import re
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound, VideoUnavailable

from deep_translator import GoogleTranslator
import time


# -----------------------------------------------------------
# üü© –í–∑–µ–º–∞ –∑–∞–≥–ª–∞–≤–∏–µ –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ
# -----------------------------------------------------------

def get_video_title(video_id: str) -> str:
    url = f"https://www.youtube.com/watch?v={video_id}"
    ydl_opts = {'quiet': True, 'skip_download': True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download = False)
        return info.get('title', 'unknown_video').replace('/','-')
    

# -----------------------------------------------------------
# üü® –°–≤–∞–ª—è–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ —Å –∏–∑–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ
# -----------------------------------------------------------

def download_video(video_id: str, quality: str = "best[height<=720]"):
    url = f"https://www.youtube.com/watch?v={video_id}"
    
    # –í–∑–µ–º–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤–∏–¥–µ–æ—Ç–æ (–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≥–ª–∞–≤–∏–µ)
    with yt_dlp.YoutubeDL({'quiet': True, 'skip_download': True}) as ydl:
        info = ydl.extract_info(url, download=False)
        title = info.get('title', 'unknown_video')
    
    # –ü–æ—á–∏—Å—Ç–≤–∞–º–µ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∏ —Å–∏–º–≤–æ–ª–∏
    safe_title = re.sub(r'[\\/*?:"<>|]', "_", title)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞ –∏–∑—Ö–æ–¥–Ω–æ—Ç–æ –∏–º–µ –Ω–∞ —Ñ–∞–π–ª–∞: title + video_id
    outtmpl = f"{safe_title}_{video_id}.%(ext)s"
    
    ydl_opts = {
        'format': quality,
        'outtmpl': outtmpl,
        'merge_output_format': 'mp4',
        'noplaylist': True,
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        print(f"‚úÖ –í–∏–¥–µ–æ —Å–≤–∞–ª–µ–Ω–æ: {info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –≤–∏–¥–µ–æ')}")


# -----------------------------------------------------------
# üü¶ –°–≤–∞–ª—è–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
# -----------------------------------------------------------        

def download_transcript(video_id, language="en", translate=None, chunk_size=4500, delay=0.2):
    """
    –ò–∑–≤–ª–∏—á–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ç–∞ –∏ —è –ø—Ä–µ–≤–µ–∂–¥–∞, –∞–∫–æ translate_to –µ –∑–∞–¥–∞–¥–µ–Ω.
    –°—ä–≤–º–µ—Å—Ç–∏–º–æ —Å –Ω–æ–≤–∏—è youtube-transcript-api (v0.6+)
    –ò–∑—Ç–µ–≥–ª—è –∏ –ø–æ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–µ–≤–µ–∂–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ç–∞ –Ω–∞ YouTube –≤–∏–¥–µ–æ.
    
    :param video_id: ID –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ
    :param lang: –µ–∑–∏–∫ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ 'en')
    :param translate: –µ–∑–∏–∫ –∑–∞ –ø—Ä–µ–≤–æ–¥ (–ø—Ä–∏–º–µ—Ä: 'bg')
    :param output_file: –∏–º–µ –Ω–∞ —Ñ–∞–π–ª–∞ –∑–∞ –∑–∞–ø–∏—Å (–ø—Ä–∏–º–µ—Ä: 'transcript.txt')
    """
    print(f"üé¨ –ò–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞ –≤–∏–¥–µ–æ {video_id}...")

    # –í–∑–µ–º–∞–º–µ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ  
    try:
        title = get_video_title(video_id)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –≤–∑–µ–º–µ –∑–∞–≥–ª–∞–≤–∏–µ –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ: {e}")
        title = "unknown_video"

    # –ü–æ—á–∏—Å—Ç–≤–∞ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ –æ—Ç —Å–∏–º–≤–æ–ª–∏, –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏ –∑–∞ —Ñ–∞–π–ª–æ–≤–µ
    safe_title = re.sub(r'[\\/*?:"<>|]', "_", title)

    # –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ, —á–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    #os.makedirs(output_dir, exist_ok=True)

    # --------------------------------------
    # –í–∑–µ–º–∞–Ω–µ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
    # --------------------------------------
    yt = YouTubeTranscriptApi()
    try:
        transcript = yt.fetch(video_id, languages=[language])
    except TranscriptsDisabled:
        print("‚ùå –¢–æ–≤–∞ –≤–∏–¥–µ–æ –Ω—è–º–∞ –≤–∫–ª—é—á–µ–Ω–∏ —Å—É–±—Ç–∏—Ç—Ä–∏.")
        return None, None
    except NoTranscriptFound:
        print(f"‚ùå –ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞ –µ–∑–∏–∫–∞ '{language}'.")
        return None, None
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç–µ–≥–ª—è–Ω–µ—Ç–æ: {e}")
        return None, None
    
    # –ò–∑–≤–ª–∏—á–∞–º–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –æ–±–µ–∫—Ç–∏—Ç–µ
    original_lines = [snippet.text.strip() for snippet in transcript if snippet.text.strip()]
    original_text = " ".join(original_lines)

    # –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ, —á–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    #os.makedirs(output_dir, exist_ok=True)
    
    # –§–∞–π–ª –∑–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    original_file = f"{safe_title}_original_{video_id}.txt"
    # –∑–∞–ø–∏—Å–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ç–µ–∫—Å—Ç
    with open(original_file, "w", encoding="utf-8") as f:
        f.write(original_text)
    print(f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ –∑–∞–ø–∞–∑–µ–Ω–∞ –∫–∞—Ç–æ: {original_file}")

    # --------------------------------------
    # –ü—Ä–µ–≤–æ–¥ (–ø–æ –∏–∑–±–æ—Ä)
    # --------------------------------------
    translated_text = None

    # –ê–∫–æ –∏–º–∞ –∑–∞—è–≤–µ–Ω –ø—Ä–µ–≤–æ–¥
    if translate:
        print(f"üåê –ü—Ä–µ–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ç–∞ –∫—ä–º '{translate}' (chunk_size={chunk_size}, delay={delay})...")
        # –°—ä–∑–¥–∞–≤–∞–º–µ translator; –∞–∫–æ lang –µ None –∏–ª–∏ 'auto' –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ 'auto'
        src = language if language else "auto"
        translator = GoogleTranslator(source=src, target=translate)

        # –ø—Ä–µ–≤–µ–∂–¥–∞–º–µ –ø–æ chunks -> –ø–æ–ª—É—á–∞–≤–∞–º–µ –ø—Ä–µ–≤–µ–¥–µ–Ω–∏ lines
        translated_lines = _translate_chunks(original_lines, translator, chunk_size=chunk_size, delay=delay)

        # —Å–≥–ª–æ–±—è–≤–∞–Ω–µ –∏ –∑–∞–ø–∏—Å
        translated_text = " ".join(translated_lines)
        translated_file = f"{safe_title}_translated_{translate}_{video_id}.txt"
        with open(translated_file, "w", encoding="utf-8") as f:
            f.write(translated_text)
            print(f"‚úÖ –ü—Ä–µ–≤–µ–¥–µ–Ω–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ –∑–∞–ø–∞–∑–µ–Ω–∞ –∫–∞—Ç–æ: {translated_file}")

#        try:
#            translator = GoogleTranslator(source=language, target=translate)
#            translated_text = translator.translate(original_text)
#
#            translated_file = f"{title}_translated_{translate}.txt"
#            with open(translated_file, encoding="utf-8") as f:
#                f.write(translated_text)
#            print(f"‚úÖ –ü—Ä–µ–≤–µ–¥–µ–Ω–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ –∑–∞–ø–∞–∑–µ–Ω–∞ –∫–∞—Ç–æ: {translated_file}")
#
#        except Exception as e:
#            print(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤–æ–¥–∞: {e}")


def _translate_chunks(lines, translator, chunk_size=4500, delay=0.2):
    """
    –í—ä—Ç—Ä–µ—à–Ω–∞ –ø–æ–º–æ—â–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è:
    - lines: —Å–ø–∏—Å—ä–∫ –æ—Ç short text snippets (strings)
    - translator: –µ–∫–∑–µ–º–ø–ª—è—Ä GoogleTranslator(source=..., target=...)
    - chunk_size: –º–∞–∫—Å. –±—Ä–æ–π —Å–∏–º–≤–æ–ª–∏ –Ω–∞ chunk (–∑–∞ safety –æ—Å—Ç–∞–≤—è–º–µ < 5000)
    - delay: –ø–∞—É–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∏ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∏—Ç–µ (rate-limit)
    –í—Ä—ä—â–∞ —Å–ø–∏—Å—ä–∫ translated_lines —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∞—â –Ω–∞ lines.
    """
    SEP = "|||+++|||"
    n = len(lines)
    translated_lines = []
    i = 0

    while i < n:
        # –°–≥–ª–æ–±—è–≤–∞–º–µ chunk –æ—Ç –Ω—è–∫–æ–ª–∫–æ —Ä–µ–¥–∞, –±–µ–∑ –¥–∞ –Ω–∞–¥–≤–∏—à–∞–≤–∞–º–µ chunk_size 
        j = i + 1
        chunk_items = [lines[i]]
        cur_len = len(lines[i])

        while j < n and (cur_len + len(SEP) + len(lines[j])) <= chunk_size:
            cur_len += len(SEP) + len(lines[j])
            chunk_items.append(lines[j])
            j += 1

        chunk_text = SEP.join(chunk_items)

        try:
            translated_chunk = translator.translate(chunk_text)
            # –û–ø–∏—Ç–≤–∞–º–µ –¥–∞ —Ä–∞–∑–¥–µ–ª–∏–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ SEP
            parts = translated_chunk.split(SEP)
            if len(parts) == len(chunk_items):
                translated_lines.extend(parts)
            else:
                # –ù–µ—â–æ —Å–µ –µ –ø—Ä–æ–º–µ–Ω–∏–ª–æ –ø—Ä–∏ –ø—Ä–µ–≤–æ–¥–∞ (SEP –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç/–ø—Ä–æ–º–µ–Ω–µ–Ω) -> fallback
                # –ê–∫–æ Google Translate –ø—Ä–æ–º–µ–Ω–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
                print(f"‚ö†Ô∏è –ù–µ–ø—ä–ª–µ–Ω chunk [{i}:{j}] ‚Äî fallback –ø–æ —Ä–µ–¥–æ–≤–µ")
                for item in chunk_items:
                    try:
                        translated_lines.append(translator.translate(item))
                    except Exception as e2:
                        print(f"‚ùó –ü—Ä–æ–±–ª–µ–º –ø—Ä–∏ –ø—Ä–µ–≤–æ–¥ –Ω–∞ —Ä–µ–¥: {e2}")
                        translated_lines.append(item)
                    time.sleep(delay)
        except Exception as e:
            # fallback: –ø—Ä–µ–≤–µ–∂–¥–∞–º–µ –ø–æ–µ–¥–∏–Ω–∏—á–Ω–æ
            print(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤–æ–¥ –Ω–∞ chunk [{i}:{j}] ‚Äî {e}")
            # fallback: –ø—Ä–µ–≤–µ–∂–¥–∞–º–µ –≤—Å–µ–∫–∏ —Ä–µ–¥ –ø–æ–æ—Ç–¥–µ–ª–Ω–æ
            for item in chunk_items:
                try:
                    translated_lines.append(translator.translate(item))
 
                except Exception as e2:
                    print(f"‚ùó –ü—Ä–æ–±–ª–µ–º –ø—Ä–∏ –ø—Ä–µ–≤–æ–¥ –Ω–∞ —Ä–µ–¥: {e2}")
                    translated_lines.append(item)
                time.sleep(delay)

        # –ø–∞—É–∑–∞ –º–µ–∂–¥—É chunk-–æ–≤–µ
        i = j
        time.sleep(delay)

    return translated_lines


# -----------------------------------------------------------
# ‚öôÔ∏è –ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å argparse
# -----------------------------------------------------------
def main():
    parser = argparse.ArgumentParser(
        description='üé¨ YouTube Video & Transcript Downloader'
    )
    parser.add_argument(
        "--id",
        required=True,
        help="YouTube video ID (–ø—Ä–∏–º–µ—Ä: dQw4w9WgXcQ)"
    )
    parser.add_argument(
        "--action",
        choices=["video","transcript", "both"],
        default="both",
        help="–î–µ–π—Å—Ç–≤–∏–µ: 'video', 'transcript' –∏–ª–∏ 'both' (–ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ: both)"
    )
    parser.add_argument(
        "--quality",
        choices=["best", "1080p", "720p", "480p", "audio"],
        default="720p",
        help="–ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ: best, 1080p, 720p, 480p, audio (–ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ: 720p)"
    )
    parser.add_argument(
        "--lang",
        default="en",
        help="–ï–∑–∏–∫—ä—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–Ω–∞–ø—Ä. en, es, fr, bg). –ü–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ: en."
    )
    parser.add_argument(
        "--translate",
        help="–ü—Ä–µ–≤–µ–¥–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ç–∞ –∫—ä–º –∏–∑–±—Ä–∞–Ω–∏—è –µ–∑–∏–∫ (–ø—Ä–∏–º–µ—Ä: bg, fr, de). –ê–∫–æ –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω–æ, –Ω—è–º–∞ –ø—Ä–µ–≤–æ–¥."
    )

    args = parser.parse_args()

    # –ú–∞–ø–≤–∞–Ω–µ –Ω–∞ –∏–∑–±–æ—Ä–∏—Ç–µ –∫—ä–º yt-dlp —Ñ–æ—Ä–º–∞—Ç–∏
    quality_map = {
        "best": "best",
        "1080p": "bestvideo[height<=1080]+bestaudio/best[height<=1080]",
        "720p": "bestvideo[height<=720]+bestaudio/best[height<=720]",
        "480p": "bestvideo[height<=480]+bestaudio/best[height<=480]",
        "audio": "bestaudio[ext=m4a]",
    }

    # –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ —Å–ø–æ—Ä–µ–¥ –∏–∑–±—Ä–∞–Ω–æ—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ
    if args.action in ["video", "both"]:
        download_video(args.id, quality_map[args.quality])

    if args.action in ["transcript", "both"]:
        download_transcript(args.id, args.lang, args.translate)

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")        


if __name__ == "__main__":
    main()    